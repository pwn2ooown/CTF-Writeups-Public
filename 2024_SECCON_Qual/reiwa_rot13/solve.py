from sage.all import *

def gcd(g1, g2): 
    while g2:
        g1, g2 = g2, g1 % g2
    return g1.monic()

def franklinreiter(C1, C2, e, N, a, b):
    P = PolynomialRing(Zmod(N), 'X')
    X = P.gen()  
    g1 = (X) ** e - C1
    g2 = (a*X+b) **e - C2
    result = -gcd(g1, g2).coefficients()[0]
    return result

import codecs
import string
import random
import hashlib
key = ''.join(random.sample(string.ascii_lowercase, 10))
rot13_key = codecs.encode(key, 'rot13')
N = 105270965659728963158005445847489568338624133794432049687688451306125971661031124713900002127418051522303660944175125387034394970179832138699578691141567745433869339567075081508781037210053642143165403433797282755555668756795483577896703080883972479419729546081868838801222887486792028810888791562604036658927
e = 137
def bytes_to_long(data):
    result = 0
    for b in data:
        result = result*256 + ord(b)
    return result

c1 = 16725879353360743225730316963034204726319861040005120594887234855326369831320755783193769090051590949825166249781272646922803585636193915974651774390260491016720214140633640783231543045598365485211028668510203305809438787364463227009966174262553328694926283315238194084123468757122106412580182773221207234679
c2 = 54707765286024193032187360617061494734604811486186903189763791054142827180860557148652470696909890077875431762633703093692649645204708548602818564932535214931099060428833400560189627416590019522535730804324469881327808667775412214400027813470331712844449900828912439270590227229668374597433444897899112329233
def number_to_binary_array_10(n):
    return [int(bit) for bit in bin(n)[2:].zfill(10)]
for i in range(1024):
    aaa = number_to_binary_array_10(i)[::-1]
    for j in range(len(aaa)):
        if aaa[j] == 0:
            aaa[j] = -1
    print(aaa)
    result = 0
    for j in range(len(aaa)):
        result += aaa[j] * pow(256, j) * 13
    ooo = franklinreiter(c1, c2, e, N, 1, result)
    if ooo != 105270965659728963158005445847489568338624133794432049687688451306125971661031124713900002127418051522303660944175125387034394970179832138699578691141567745433869339567075081508781037210053642143165403433797282755555668756795483577896703080883972479419729546081868838801222887486792028810888791562604036658926:
        print(i,ooo) # 668 474273460180197900644210
'''
Enum the way of rot13 since each char after rot 13 is either +13 or -13
let m = x_0*256^0 + x_1*256^1 + x_2*256^2 + ... + x_9*256^9
rot13(m) = (x_0±13)*256^0 + (x_1±13)*256^1 + (x_2±13)*256^2 + ... + (x_9±13)*256^9
Enumerate all possible + and - and use franklin-reiter related-message attack
'''