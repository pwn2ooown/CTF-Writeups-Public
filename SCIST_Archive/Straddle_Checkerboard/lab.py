import string

cipher = "477346730474537385477442744573854774427445714247949541424746484277142495744248734627442738457134549738424248946147024673545484535171467346754946744754846705464894649495424947738547471429535946735454854714957446495243047423025487442734945145257346484649424648427376454972477385475474648427714249574424873462484573494294574744248714271477346487146497171547734954107354548453738547744274455470482574573427145704249705427646487149467354548462467054648946494954249479464814945705714285758714224643245767384945075810734648712457646273573071424742497059427384294548484297354548734514524575435472574573427173454647548752421455487373451455487314673834549424698946494954249047427176573847734648714649719464949542494741073744648439464949542494794648414204742717657384507347575485359464873548734249342494248942765738424698457384249450734757142453424649243471495487573854754741429460474245373842714273842494714694246704652464124273457384294649495424947548945487349464773734573842714273842490474271414354242427384294649495424947846704246485487349548475994522547545484670455714648942474347734274768598548949424647424746704652464152573430482572424745744248427376454972734298484524575542474709846471469724273494671545945747404859467354548547484573257457342717345254842453475758737154773464894294548484297354548454954248734271474249705942547467046524641242548474574429573542470470462243414647427101454846942487349462804173451452457543349467442345497446737384251714673467549467454714954873427145484647744622479494522453146142495488427746714295744627657384246984597342734742146494673427141437685734247730334648714124697247730337384247949452245314614249547764946114271464945048714548422427545373842467054648946494954249464146487145371097373461425470474271734547429049427384271467346754946744742717542477384241464871765717385472574573427173457384224275242487573873842747305477046495464124246487114649467145775946224375424842494622435489494246474247765738548949424647427194649495424946754246734315946274730547745225754946744747457442714673467549467414671715487 57446434142484242714271014548494294251737384271097373461425474942744570427146487173842146142499451434537384271467346754946745474517359462243479464848427154873454642242973494548594622437349464847745737346412423454974479547733494240042489434648462434754754773842414247734517354548"
def find_kth_largest_with_position(lst, k):
    indexed_lst = list(enumerate(lst))  # Create a list of tuples with (index, value) pairs
    sorted_lst = sorted(indexed_lst, key=lambda x: x[1], reverse=True)  # Sort the list by values in descending order
    kth_largest = sorted_lst[k - 1]  # Get the k-th largest element (subtract 1 because indexing starts from 0)
    return kth_largest[1], kth_largest[0]  # Return the value and its original position

double_num_freq = [0] * 10
for i in range(10):
    for j in range(10):
        double_num_freq[i] += (cipher.count(str(i) +str(j)))

largest = find_kth_largest_with_position(double_num_freq,1)
second = find_kth_largest_with_position(double_num_freq,2)


cipher_char_list = []
i = 0
print(double_num_freq)
while i < len(cipher):
    if (cipher[i] == str(largest[1])) or (cipher[i] == str(second[1])):
        cipher_char_list.append(cipher[i: i + 2])
        i += 2
    else:
        cipher_char_list.append(cipher[i])
        i += 1

cipher_char_set = list(set(cipher_char_list))
map_list = string.ascii_lowercase[:len(cipher_char_set)]

new_cipher = ''
for c in cipher_char_list:
    new_cipher += map_list[cipher_char_set.index(c)]

print(new_cipher)

english_freq = [8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 1.974, 0.074]

indexed_lst = list(enumerate(english_freq))  # Create a list of tuples with (index, value) pairs
sorted_lst = sorted(indexed_lst, key=lambda x: x[1], reverse=True)  # Sort the list by values in descending order
for ooo in sorted_lst:
    print(chr(ooo[0]+97),ooo[1])

char_counts = {}    
for char in new_cipher:
    char_counts[char] = char_counts.get(char, 0) + 1
print(char_counts)
sorted_char_cnt = sorted(char_counts, key=lambda x: char_counts[x], reverse=True)
print(sorted_char_cnt)

mapping = {}

for i in range(len(sorted_char_cnt)):
    mapping[sorted_char_cnt[i]] = str(chr(sorted_lst[i][0]+97))

new_new_cipher = ""

for c in new_cipher:
    new_new_cipher+=mapping[c]
print(new_new_cipher) # Fail